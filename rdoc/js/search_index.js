var search_data = {"index":{"searchIndex":["ntable","emptyaxis","indexedaxis","labeledaxis","ntableerror","nosuchcellerror","objectaxis","structure","position","structuremismatcherror","structurestateerror","table","tablelockederror","unknownaxiserror","==()","==()","==()","==()","==()","==()","==()","[]()","[]()","[]=()","_offset_for_args()","add()","add()","all_axis_info()","axis_info()","coord()","coord_array()","create()","create()","decompose()","decompose_reduce()","decompose_reduce_with_position()","degenerate?()","degenerate?()","dim()","dim()","each()","each_with_position()","empty?()","empty?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","fill!()","from_json_array()","from_json_array()","from_json_object()","from_json_object()","from_json_object()","from_json_object()","from_json_object()","from_json_object()","from_nested_object()","from_nested_object()","get()","hash()","hash()","hash()","hash()","include?()","index_to_label()","index_to_label()","index_to_label()","index_to_label()","inject()","inject_with_position()","inspect()","inspect()","inspect()","inspect()","label_to_index()","label_to_index()","label_to_index()","label_to_index()","load!()","lock!()","locked?()","map()","map!()","map_with_position()","map_with_position!()","new()","new()","new()","new()","new()","next()","parent()","parent()","parse_json()","parse_json()","position()","prev()","reduce()","reduce_with_position()","remove()","replace()","set!()","shared_slice()","size()","size()","size()","slice()","structure()","substructure_including()","substructure_omitting()","to_json()","to_json_array()","to_json_object()","to_json_object()","to_json_object()","to_json_object()","to_json_object()","to_nested_object()","to_s()","to_s()","to_s()","to_s()","unlocked_copy()","history","readme"],"longSearchIndex":["ntable","ntable::emptyaxis","ntable::indexedaxis","ntable::labeledaxis","ntable::ntableerror","ntable::nosuchcellerror","ntable::objectaxis","ntable::structure","ntable::structure::position","ntable::structuremismatcherror","ntable::structurestateerror","ntable::table","ntable::tablelockederror","ntable::unknownaxiserror","ntable::emptyaxis#==()","ntable::indexedaxis#==()","ntable::labeledaxis#==()","ntable::objectaxis#==()","ntable::structure#==()","ntable::structure::position#==()","ntable::table#==()","ntable::structure::position#[]()","ntable::table#[]()","ntable::table#[]=()","ntable::table#_offset_for_args()","ntable::structure::add()","ntable::structure#add()","ntable::structure#all_axis_info()","ntable::structure#axis_info()","ntable::structure::position#coord()","ntable::structure::position#coord_array()","ntable::create()","ntable::structure#create()","ntable::table#decompose()","ntable::table#decompose_reduce()","ntable::table#decompose_reduce_with_position()","ntable::structure#degenerate?()","ntable::table#degenerate?()","ntable::structure#dim()","ntable::table#dim()","ntable::table#each()","ntable::table#each_with_position()","ntable::structure#empty?()","ntable::table#empty?()","ntable::emptyaxis#eql?()","ntable::indexedaxis#eql?()","ntable::labeledaxis#eql?()","ntable::objectaxis#eql?()","ntable::structure#eql?()","ntable::structure::position#eql?()","ntable::table#eql?()","ntable::table#fill!()","ntable::structure#from_json_array()","ntable::structure::from_json_array()","ntable::from_json_object()","ntable::emptyaxis#from_json_object()","ntable::indexedaxis#from_json_object()","ntable::labeledaxis#from_json_object()","ntable::objectaxis#from_json_object()","ntable::table::from_json_object()","ntable::from_nested_object()","ntable::table::from_nested_object()","ntable::table#get()","ntable::emptyaxis#hash()","ntable::indexedaxis#hash()","ntable::labeledaxis#hash()","ntable::objectaxis#hash()","ntable::table#include?()","ntable::emptyaxis#index_to_label()","ntable::indexedaxis#index_to_label()","ntable::labeledaxis#index_to_label()","ntable::objectaxis#index_to_label()","ntable::table#inject()","ntable::table#inject_with_position()","ntable::emptyaxis#inspect()","ntable::indexedaxis#inspect()","ntable::labeledaxis#inspect()","ntable::objectaxis#inspect()","ntable::emptyaxis#label_to_index()","ntable::indexedaxis#label_to_index()","ntable::labeledaxis#label_to_index()","ntable::objectaxis#label_to_index()","ntable::table#load!()","ntable::structure#lock!()","ntable::structure#locked?()","ntable::table#map()","ntable::table#map!()","ntable::table#map_with_position()","ntable::table#map_with_position!()","ntable::indexedaxis::new()","ntable::labeledaxis::new()","ntable::objectaxis::new()","ntable::structure::new()","ntable::table::new()","ntable::structure::position#next()","ntable::structure#parent()","ntable::table#parent()","ntable::parse_json()","ntable::table::parse_json()","ntable::structure#position()","ntable::structure::position#prev()","ntable::table#reduce()","ntable::table#reduce_with_position()","ntable::structure#remove()","ntable::structure#replace()","ntable::table#set!()","ntable::table#shared_slice()","ntable::emptyaxis#size()","ntable::structure#size()","ntable::table#size()","ntable::table#slice()","ntable::structure()","ntable::structure#substructure_including()","ntable::structure#substructure_omitting()","ntable::table#to_json()","ntable::structure#to_json_array()","ntable::emptyaxis#to_json_object()","ntable::indexedaxis#to_json_object()","ntable::labeledaxis#to_json_object()","ntable::objectaxis#to_json_object()","ntable::table#to_json_object()","ntable::table#to_nested_object()","ntable::emptyaxis#to_s()","ntable::indexedaxis#to_s()","ntable::labeledaxis#to_s()","ntable::objectaxis#to_s()","ntable::structure#unlocked_copy()","",""],"info":[["NTable","","NTable.html","","<p>NTable is an N-dimensional table data structure for Ruby.\n<p>Basics\n<p>This is a convenient data structure for …\n"],["NTable::EmptyAxis","","NTable/EmptyAxis.html","","<p>This is a “null” axis that has no elements. Not terribly useful by itself,\nbut may be a reasonable …\n"],["NTable::IndexedAxis","","NTable/IndexedAxis.html","","<p>An axis in which the rows are numerically identified by a range of\nconsecutive integers.\n"],["NTable::LabeledAxis","","NTable/LabeledAxis.html","","<p>An axis in which the labels are explicitly provided as strings.\n"],["NTable::NTableError","","NTable/NTableError.html","","<p>Base class for all NTable errors\n"],["NTable::NoSuchCellError","","NTable/NoSuchCellError.html","","<p>Raised if you attempt to access a nonexistent cell.\n"],["NTable::ObjectAxis","","NTable/ObjectAxis.html","","<p>An axis in which the labels are arbitrary objects. This axis cannot be\nserialized.\n"],["NTable::Structure","","NTable/Structure.html","","<p>A Structure describes how a table is laid out: how many dimensions it has,\nhow large the table is in …\n"],["NTable::Structure::Position","","NTable/Structure/Position.html","","<p>A coordinate into a table. This object is often provided during iteration\nto indicate where you are in …\n"],["NTable::StructureMismatchError","","NTable/StructureMismatchError.html","","<p>An attempt was made to perform an operation on two tables that were not\ncompatible with one another. …\n"],["NTable::StructureStateError","","NTable/StructureStateError.html","","<p>Raised if the structure lock/unlock state is incorrect for the current\noperation. For example, it is …\n"],["NTable::Table","","NTable/Table.html","","<p>An N-dimensional table object, comprising structure and values.\n"],["NTable::TableLockedError","","NTable/TableLockedError.html","","<p>Raised if you attempt to modify a table that is locked. Locked tables are\nusually “sub-views” …\n"],["NTable::UnknownAxisError","","NTable/UnknownAxisError.html","","<p>A given axis name or index was not recognized.\n"],["==","NTable::EmptyAxis","NTable/EmptyAxis.html#method-i-3D-3D","(obj_)",""],["==","NTable::IndexedAxis","NTable/IndexedAxis.html#method-i-3D-3D","(obj_)",""],["==","NTable::LabeledAxis","NTable/LabeledAxis.html#method-i-3D-3D","(obj_)",""],["==","NTable::ObjectAxis","NTable/ObjectAxis.html#method-i-3D-3D","(obj_)",""],["==","NTable::Structure","NTable/Structure.html#method-i-3D-3D","(rhs_)","<p>Returns true if the two structures are equivalent in the axes but not\nnecessarily in the offsets. The …\n"],["==","NTable::Structure::Position","NTable/Structure/Position.html#method-i-3D-3D","(obj_)",""],["==","NTable::Table","NTable/Table.html#method-i-3D-3D","(rhs_)","<p>Returns true if the two tables are equivalent in data but not necessarily\nparentage. The structure of …\n"],["[]","NTable::Structure::Position","NTable/Structure/Position.html#method-i-5B-5D","(axis_)",""],["[]","NTable::Table","NTable/Table.html#method-i-5B-5D","(*args_)",""],["[]=","NTable::Table","NTable/Table.html#method-i-5B-5D-3D","(*args_, &block_)",""],["_offset_for_args","NTable::Table","NTable/Table.html#method-i-_offset_for_args","(args_)",""],["add","NTable::Structure","NTable/Structure.html#method-c-add","(axis_, name_=nil)","<p>Create a new structure and automatically add the given axis. See\nStructure#add.\n"],["add","NTable::Structure","NTable/Structure.html#method-i-add","(axis_, name_=nil)","<p>Append an axis to the configuration of this structure. You must provide the\naxis, as an object that duck-types …\n"],["all_axis_info","NTable::Structure","NTable/Structure.html#method-i-all_axis_info","()","<p>Returns an array of AxisInfo objects representing all the axes of this\nstructure.\n"],["axis_info","NTable::Structure","NTable/Structure.html#method-i-axis_info","(axis_)","<p>Returns the AxisInfo object representing the given axis. The axis must be\nspecified by 0-based index …\n"],["coord","NTable::Structure::Position","NTable/Structure/Position.html#method-i-coord","(axis_)","<p>Returns the label of the coordinate along the given axis. The axis may be\nprovided by name or index. …\n"],["coord_array","NTable::Structure::Position","NTable/Structure/Position.html#method-i-coord_array","()","<p>Returns an array of all coordinate labels along the axes in order.\n"],["create","NTable","NTable.html#method-c-create","(structure_, data_={})","<p>Create a table with the given Structure.\n<p>You can initialize the data using the following options:\n<p>:fill … &mdash; "],["create","NTable::Structure","NTable/Structure.html#method-i-create","(data_={})","<p>Create a new table using this structure as the structure. Note that this\nalso has the side effect of …\n"],["decompose","NTable::Table","NTable/Table.html#method-i-decompose","(*axes_)","<p>Decomposes this table, breaking it into a set of lower-dimensional tables,\nall arranged in a table.  …\n"],["decompose_reduce","NTable::Table","NTable/Table.html#method-i-decompose_reduce","(decompose_axes_, *reduce_args_, &block_)","<p>Decompose this table using the given axes, and then reduce each inner\ntable, returning a table of the …\n"],["decompose_reduce_with_position","NTable::Table","NTable/Table.html#method-i-decompose_reduce_with_position","(decompose_axes_, *reduce_args_, &block_)","<p>Decompose this table using the given axes, and then reduce each inner table\nwith position, returning …\n"],["degenerate?","NTable::Structure","NTable/Structure.html#method-i-degenerate-3F","()","<p>Returns true if this is a degenerate/scalar structure. That is, if the\ndimension is 0.\n"],["degenerate?","NTable::Table","NTable/Table.html#method-i-degenerate-3F","()","<p>True if this is a degenerate (scalar) table with a single cell and no\ndimensions.\n"],["dim","NTable::Structure","NTable/Structure.html#method-i-dim","()","<p>Returns the number of axes/dimensions currently in this structure.\n"],["dim","NTable::Table","NTable/Table.html#method-i-dim","()","<p>The number of dimensions/axes in this table.\n"],["each","NTable::Table","NTable/Table.html#method-i-each","(&block_)","<p>Iterate over all table cells, in order, and call the given block. If no\nblock is given, an ::Enumerator …\n"],["each_with_position","NTable::Table","NTable/Table.html#method-i-each_with_position","()","<p>Iterate over all table cells, and call the given block with the value and\nthe Structure::Position for …\n"],["empty?","NTable::Structure","NTable/Structure.html#method-i-empty-3F","()","<p>Returns true if this structure implies an “empty” table, one with no cells.\nThis happens only …\n"],["empty?","NTable::Table","NTable/Table.html#method-i-empty-3F","()","<p>True if this table has no cells.\n"],["eql?","NTable::EmptyAxis","NTable/EmptyAxis.html#method-i-eql-3F","(obj_)",""],["eql?","NTable::IndexedAxis","NTable/IndexedAxis.html#method-i-eql-3F","(obj_)",""],["eql?","NTable::LabeledAxis","NTable/LabeledAxis.html#method-i-eql-3F","(obj_)",""],["eql?","NTable::ObjectAxis","NTable/ObjectAxis.html#method-i-eql-3F","(obj_)",""],["eql?","NTable::Structure","NTable/Structure.html#method-i-eql-3F","(rhs_)","<p>Returns true if the two structures are equivalent, both in the axes and in\nthe parentage. The structure …\n"],["eql?","NTable::Structure::Position","NTable/Structure/Position.html#method-i-eql-3F","(obj_)",""],["eql?","NTable::Table","NTable/Table.html#method-i-eql-3F","(rhs_)","<p>Returns true if the two tables are equivalent, both in the data and in the\nparentage. The structure of …\n"],["fill!","NTable::Table","NTable/Table.html#method-i-fill-21","(value_)","<p>Fill all table cells with the given value.\n<p>You cannot load values into a table with a parent. Instead …\n"],["from_json_array","NTable::Structure","NTable/Structure.html#method-i-from_json_array","(array_)","<p>Use the given array to reconstitute a structure previously serialized using\nStructure#to_json_array. …\n"],["from_json_array","NTable::Structure","NTable/Structure.html#method-c-from_json_array","(array_)","<p>Deserialize a structure from the given JSON array\n"],["from_json_object","NTable","NTable.html#method-c-from_json_object","(json_)","<p>Construct a table given a JSON object representation.\n"],["from_json_object","NTable::EmptyAxis","NTable/EmptyAxis.html#method-i-from_json_object","(json_obj_)","<p>Configure this axis given a hash configuration that came from a JSON\nserialization.\n"],["from_json_object","NTable::IndexedAxis","NTable/IndexedAxis.html#method-i-from_json_object","(json_obj_)",""],["from_json_object","NTable::LabeledAxis","NTable/LabeledAxis.html#method-i-from_json_object","(json_obj_)",""],["from_json_object","NTable::ObjectAxis","NTable/ObjectAxis.html#method-i-from_json_object","(json_obj_)",""],["from_json_object","NTable::Table","NTable/Table.html#method-c-from_json_object","(json_)","<p>Deprecated synonym for ::NTable.from_json_object\n"],["from_nested_object","NTable","NTable.html#method-c-from_nested_object","(obj_, field_opts_=[], opts_={})","<p>Construct a table given nested hashes and arrays.\n<p>The second argument is an array of hashes, providing …\n"],["from_nested_object","NTable::Table","NTable/Table.html#method-c-from_nested_object","(obj_, field_opts_=[], opts_={})","<p>Deprecated synonym for ::NTable.from_nested_object\n"],["get","NTable::Table","NTable/Table.html#method-i-get","(*args_)","<p>Returns the value in the cell at the given coordinates, which must be given\nas labels. You may specify …\n"],["hash","NTable::EmptyAxis","NTable/EmptyAxis.html#method-i-hash","()",""],["hash","NTable::IndexedAxis","NTable/IndexedAxis.html#method-i-hash","()",""],["hash","NTable::LabeledAxis","NTable/LabeledAxis.html#method-i-hash","()",""],["hash","NTable::ObjectAxis","NTable/ObjectAxis.html#method-i-hash","()",""],["include?","NTable::Table","NTable/Table.html#method-i-include-3F","(*args_)","<p>Returns a boolean indicating whether the given cell coordinates actually\nexist. The arguments use the …\n"],["index_to_label","NTable::EmptyAxis","NTable/EmptyAxis.html#method-i-index_to_label","(index_)","<p>Given a 0-based integer index, return the corresponding label object.\nReturns nil if the index is out …\n"],["index_to_label","NTable::IndexedAxis","NTable/IndexedAxis.html#method-i-index_to_label","(index_)",""],["index_to_label","NTable::LabeledAxis","NTable/LabeledAxis.html#method-i-index_to_label","(index_)",""],["index_to_label","NTable::ObjectAxis","NTable/ObjectAxis.html#method-i-index_to_label","(index_)",""],["inject","NTable::Table","NTable/Table.html#method-i-inject","(*args_)",""],["inject_with_position","NTable::Table","NTable/Table.html#method-i-inject_with_position","(*args_)",""],["inspect","NTable::EmptyAxis","NTable/EmptyAxis.html#method-i-inspect","()",""],["inspect","NTable::IndexedAxis","NTable/IndexedAxis.html#method-i-inspect","()",""],["inspect","NTable::LabeledAxis","NTable/LabeledAxis.html#method-i-inspect","()",""],["inspect","NTable::ObjectAxis","NTable/ObjectAxis.html#method-i-inspect","()",""],["label_to_index","NTable::EmptyAxis","NTable/EmptyAxis.html#method-i-label_to_index","(label_)","<p>Given a label object, return the corresponding 0-based integer index.\nReturns nil if the label is not …\n"],["label_to_index","NTable::IndexedAxis","NTable/IndexedAxis.html#method-i-label_to_index","(label_)",""],["label_to_index","NTable::LabeledAxis","NTable/LabeledAxis.html#method-i-label_to_index","(label_)",""],["label_to_index","NTable::ObjectAxis","NTable/ObjectAxis.html#method-i-label_to_index","(label_)",""],["load!","NTable::Table","NTable/Table.html#method-i-load-21","(vals_)","<p>Load an array of values into the table cells, in order.\n<p>You cannot load values into a table with a parent. …\n"],["lock!","NTable::Structure","NTable/Structure.html#method-i-lock-21","()","<p>Lock this structure, preventing further modification. Generally, this is\ndone automatically when a structure …\n"],["locked?","NTable::Structure","NTable/Structure.html#method-i-locked-3F","()","<p>Returns true if this structure has been locked.\n"],["map","NTable::Table","NTable/Table.html#method-i-map","(&block_)","<p>Return a new table whose structure is the same as this table, and whose\nvalues are given by mapping the …\n"],["map!","NTable::Table","NTable/Table.html#method-i-map-21","(&block_)","<p>Modify the current table in place, mapping values through the given block.\n<p>You cannot set values in a …\n"],["map_with_position","NTable::Table","NTable/Table.html#method-i-map_with_position","()","<p>Same as Table#map except the block is passed the current table’s value for\neach cell, and the cell’s …\n"],["map_with_position!","NTable::Table","NTable/Table.html#method-i-map_with_position-21","()","<p>Modify the current table in place, mapping values through the given block,\nwhich takes both the old value …\n"],["new","NTable::IndexedAxis","NTable/IndexedAxis.html#method-c-new","(size_, start_=0)","<p>Create an IndexedAxis with the given number of rows. The optional start\nparameter indicates the number …\n"],["new","NTable::LabeledAxis","NTable/LabeledAxis.html#method-c-new","(*labels_)","<p>Create a LabeledAxis given an array of the label strings. Symbols may also\nbe provided, but will be converted …\n"],["new","NTable::ObjectAxis","NTable/ObjectAxis.html#method-c-new","(labels_)","<p>Create a ObjectAxis given an array of the label objects.\n"],["new","NTable::Structure","NTable/Structure.html#method-c-new","()","<p>Create an empty Structure. An empty structure corresponds to a table with\nno axes and a single value …\n"],["new","NTable::Table","NTable/Table.html#method-c-new","(structure_, data_={})","<p>This is a low-level table creation mechanism. Generally, you should use\n::NTable.create instead.\n"],["next","NTable::Structure::Position","NTable/Structure/Position.html#method-i-next","()","<p>Returns the Position of the “next” cell in the table, or nil if this is the\nlast cell.\n"],["parent","NTable::Structure","NTable/Structure.html#method-i-parent","()","<p>Returns the parent structure if this is a sub-view into a larger structure,\nor nil if not.\n"],["parent","NTable::Table","NTable/Table.html#method-i-parent","()","<p>Return the parent of this table. A table with a parent shares the parent’s\ndata, and cannot have its …\n"],["parse_json","NTable","NTable.html#method-c-parse_json","(json_)","<p>Construct a table given a JSON unparsed string representation.\n"],["parse_json","NTable::Table","NTable/Table.html#method-c-parse_json","(json_)","<p>Deprecated synonym for ::NTable.parse_json\n"],["position","NTable::Structure","NTable/Structure.html#method-i-position","(arg_)","<p>Creates a Position object for the given argument. The argument may be a\nhash of row labels by axis name, …\n"],["prev","NTable::Structure::Position","NTable/Structure/Position.html#method-i-prev","()","<p>Returns the Position of the “previous” cell in the table, or nil if this is\nthe first cell. …\n"],["reduce","NTable::Table","NTable/Table.html#method-i-reduce","(*args_)","<p>Performs a reduce on the entire table and returns the result. You may use\none of the following call sequences: …\n"],["reduce_with_position","NTable::Table","NTable/Table.html#method-i-reduce_with_position","(*args_)","<p>Performs a reduce on the entire table and returns the result. You may use\none of the following call sequences: …\n"],["remove","NTable::Structure","NTable/Structure.html#method-i-remove","(axis_)","<p>Remove the given axis from the configuration. You may specify the axis by\n0-based index, or by name string. …\n"],["replace","NTable::Structure","NTable/Structure.html#method-i-replace","(axis_, naxis_=nil)","<p>Replace the given axis already in the configuration, with the given new\naxis. The old axis must be specified …\n"],["set!","NTable::Table","NTable/Table.html#method-i-set-21","(*args_, &block_)","<p>Set the value in the cell at the given coordinates. If a block is given, it\nis passed the current value …\n"],["shared_slice","NTable::Table","NTable/Table.html#method-i-shared_slice","(hash_)","<p>Returns a table containing a “slice” of this table. The given hash should\nbe keyed by axis …\n"],["size","NTable::EmptyAxis","NTable/EmptyAxis.html#method-i-size","()","<p>Return the number of rows along this axis. An empty axis will return 0.\n"],["size","NTable::Structure","NTable/Structure.html#method-i-size","()","<p>Returns the number of cells in a table with this structure.\n"],["size","NTable::Table","NTable/Table.html#method-i-size","()","<p>The number of cells in this table.\n"],["slice","NTable::Table","NTable/Table.html#method-i-slice","(hash_)","<p>Returns a table containing a “slice” of this table. The given hash should\nbe keyed by axis …\n"],["structure","NTable","NTable.html#method-c-structure","(axis_=nil, name_=nil)","<p>Create and return a new Structure.\n<p>If you pass the optional axis argument, that axis will be added to …\n"],["substructure_including","NTable::Structure","NTable/Structure.html#method-i-substructure_including","(*axes_)","<p>Create a new substructure of this structure. The new structure has this\nstructure as its parent, but …\n"],["substructure_omitting","NTable::Structure","NTable/Structure.html#method-i-substructure_omitting","(*axes_)","<p>Create a new substructure of this structure. The new structure has this\nstructure as its parent, but …\n"],["to_json","NTable::Table","NTable/Table.html#method-i-to_json","()","<p>Returns a JSON serialization of this table, as an unparsed string.\n"],["to_json_array","NTable::Structure","NTable/Structure.html#method-i-to_json_array","()","<p>Returns an array of objects representing the configuration of this\nstructure. Such an array can be serialized …\n"],["to_json_object","NTable::EmptyAxis","NTable/EmptyAxis.html#method-i-to_json_object","(json_obj_)","<p>Populate the given hash with the configuration of this axis. The hash will\neventually be serialized via …\n"],["to_json_object","NTable::IndexedAxis","NTable/IndexedAxis.html#method-i-to_json_object","(json_obj_)",""],["to_json_object","NTable::LabeledAxis","NTable/LabeledAxis.html#method-i-to_json_object","(json_obj_)",""],["to_json_object","NTable::ObjectAxis","NTable/ObjectAxis.html#method-i-to_json_object","(json_obj_)",""],["to_json_object","NTable::Table","NTable/Table.html#method-i-to_json_object","()","<p>Returns a JSON serialization of this table, as an object. If you need to\noutput a JSON string, you must …\n"],["to_nested_object","NTable::Table","NTable/Table.html#method-i-to_nested_object","(opts_={})","<p>Returns a nested-object (nested arrays and hashes) serialization of this\ntable.\n"],["to_s","NTable::EmptyAxis","NTable/EmptyAxis.html#method-i-to_s","()",""],["to_s","NTable::IndexedAxis","NTable/IndexedAxis.html#method-i-to_s","()",""],["to_s","NTable::LabeledAxis","NTable/LabeledAxis.html#method-i-to_s","()",""],["to_s","NTable::ObjectAxis","NTable/ObjectAxis.html#method-i-to_s","()",""],["unlocked_copy","NTable::Structure","NTable/Structure.html#method-i-unlocked_copy","()","<p>Create an unlocked copy of this structure that can be further modified.\n"],["History","","History_rdoc.html","","<p>0.1.1 / 2012-09-07\n<p>The “preferred” construction methods are now module methods on ::NTable. …\n"],["README","","README_rdoc.html","","<p>NTable\n<p>NTable is an N-dimensional table data structure for Ruby.\n<p>Summary\n"]]}}